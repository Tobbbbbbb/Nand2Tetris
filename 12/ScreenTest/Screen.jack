// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

	static boolean color;

    /** Initializes the Screen. */
    function void init() {

	let color = true;
	return;

    }

    /** Erases the entire screen. */
    function void clearScreen() {

    var boolean beforeColor;

	var int x1, x2, y1, y2;

	let x1 = 0;
	let y1 = 0;
	let x2 = 511;
	let y2 = 255;

	let beforeColor = color;

	do Screen.setColor(false);
	do Screen.drawRectangle(x1, y1, x2, y2);
	do Screen.setColor(beforeColor);
	return;

    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {

	let color = b;
	return;
	
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {

	var int address, value, mod, twoPow, twoCount, big, temp;
	var String bin;

	let address = (32*y) + (x/16);
	let value = Memory.peek(16384 + address);
	let mod = x - ((x/16)*16);

	let big = 32767*2 + 1;
	let twoPow = 1;
	let twoCount = 0;
	while(twoCount < mod){
		let twoPow = twoPow * 2;
		let twoCount = twoCount + 1;
	}

	if(color){
		let value = value | twoPow;
	} else {
		let temp = big - twoPow;
		let value = value & temp;
	}

	do Memory.poke(16384+address, value);
	return;

    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
	var int a, b, dy, dx, diff, x3, y3, temp;
	var boolean start, end; //if true, then start at x2 and go backwards.
	
	let a = 0;
	let b = 0;
	let diff = 0;
	let dx = x2 - x1;
	let dy = y2 - y1;
	let x3 = Math.min(x1, x2);
	let y3 = Math.min(y1, y2);
	let start = x3 = x2;
	let end = y3 = y2;

	if(start & (~(dx=0) | (end) )){
			let temp = x1;
			let x1 = x2;
			let x2 = temp;
			let temp = y1;
			let y1 = y2;
			let y2 = temp;
			let dx = x2 - x1;
			let dy = y2 - y1;
	}

	if((dx = 0) | (dy = 0)) {
		if(dx = 0) {
			while(~(b>dy)) {
				do Screen.drawPixel(x1, y3+b);
				let b = b + 1;
			}
		} else {
			while(~(a>dx)) {
				do Screen.drawPixel(x3+a, y1);
				let a = a + 1;
			}
		}
	} else {
		//if(~start){ //if x1 -> x2
			if(dy < 0){ //??? Why does this work ???
				while( ~(a>dx) & ~(b>(Math.abs(dy))) ) {

					do Screen.drawPixel(x1+a, y1-b);

					if(diff < 0) {
						let a = a + 1;
						let diff = diff + Math.abs(dy);
					} else {
						let b = b + 1;
						let diff = diff - dx;
					}
				}
			} else {
				while( ~(a>dx) & ~(b>dy) ) {

					do Screen.drawPixel(x1+a, y1+b);

					if(diff < 0) {
						let a = a + 1;
						let diff = diff + dy;
					} else {
						let b = b + 1;
						let diff = diff - dx;
					}
				}
			}
		} /**else { //if x2 -> x1
			if(dy > 0){
				while( ~(a>dx) & ~(b>dy) ) {

					do Screen.drawPixel(x2+a, y1-b);

					if(diff < 0) {
						let a = a + 1;
						let diff = diff - dy;
					} else {
						let b = b + 1;
						let diff = diff - dx;
					}
				}
			} else {
				while( ~(a>dx) & ~(b>dy) ) {

					do Screen.drawPixel(x2+a, y1+b);

					if(diff < 0) {
						let a = a + 1;
						let diff = diff + dy;
					} else {
						let b = b + 1;
						let diff = diff - dx;
					}
				}
			}
		}

	}*/
	return;
	
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
	
	var int b, dy;
	let b = 0;
	let dy = y2 - y1;

	while( (b < dy) | (b = dy) ) {
		do Screen.drawLine(x1, y1+b, x2, y1+b);
		let b = b + 1;
	}
	return;
	
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
	
	var int dy;

	let dy = -r;

	while(dy < r) {
		do Screen.drawLine(x - Math.sqrt((r*r) - (dy*dy)), y + dy, x + Math.sqrt((r*r) - (dy*dy)), y + dy);
		let dy = dy + 1;
	}
	return;

    }
}
