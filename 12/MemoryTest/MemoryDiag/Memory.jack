 // This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

	static Array ram;
	static Array heap;
	static int freeList;

    /** Initializes the class. */
    function void init() {
	let ram = 0;
	let heap = 2048;
	let freeList = heap;
	let heap[0] = 0;
	let heap[1] = 14334;
	return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
	return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
	let ram[address] = value;
	return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
	var int x;

	/**let x = freeList;
	let prevX = freeList;
	
	if(ram[freeList] = 0){
		let freeList = freeList + size + 2;
		let ram[freeList + 1] = ram[(freeList - size) - 1] - (size + 2);
		let ram[(freeList - size) - 1] = size;
		let ram[freeList] = 0;
		let prevX = freeList - size;
	} else {

		if(ram[freeList+1] > (size + 2)){

			let prevX = freeList + 2;
			let freeList = freeList + size + 2;
			let ram[freeList + 1] = ram[(freeList - size) - 1] - (size + 2);
			let ram[(freeList - size) - 1] = size;
			let ram[freeList] = ram[freeList-size-2];

		} else {
			while(ram[x + 1] < (size + 2)) {
				let prevX = x;
				let x = ram[x];
			}
			let prevX = x;
			let x = ram[x];
			
			let x = x + size + 2;
			let ram[x + 1] = ram[(x - size) - 1] - (size + 2);
			let ram[(x - size) - 1] = size;
			let ram[x] = ram[x - size - 2];


			let ram[prevX] = x;
			let prevX = prevX + 2;
		}
	}*/

	let x = freeList;

	while(ram[x+1] < (size+2)){
		let x = ram[x];
	}

	let ram[x+1] = (ram[x+1] - 2) - size;
	let ram[x + ram[x+1] + 2] = ram[x];
	let ram[x + ram[x+1] + 3] = size;

	return x + ram[x+1] + 4;

    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {

    var int x;

    let x = freeList;

    	/*if(ram[x] = 0){
    		let freeList = o - 2;

    	} else {*/

		while(~(ram[x] = 0)){
			let x = ram[x];
		}
		let ram[x] = o-2;

		//}

		let ram[o-2] = 0;

		return;

    }
}
