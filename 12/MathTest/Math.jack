// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    /** Initializes the library. */
    function void init() {
    	return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
	if(x < 0) {
		let x = -x;
	}
	return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {

	var int sum, shiftedX, i, tempX, tempY;

	let sum = 0;
	let i = 0;
	let tempX = Math.abs(x);
	let tempY = Math.abs(y);
	while(i < tempY){
		let sum = sum + tempX;
		let i = i + 1;
	}
	if(x < 0) {
		let sum = -sum;
	}
	if(y < 0) {
		let sum = -sum;
	}
	return sum;

    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {

	var int div, rem, tempX, tempY;
	let div = 0;
	let tempY = Math.abs(y);
	let rem = Math.abs(x);
	while (~(rem < tempY)) {
		let rem = rem - tempY;
		let div = div + 1;
	}
	if(x < 0) {
		let div = -div;
	}
	if(y < 0) {
		let div = -div;
	}
	return div;

    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {

	var int y, j, n, temp, loop, two, nTemp;
	let y = 0;
	let nTemp = 1;
	let n = 0;
	while(nTemp < x & nTemp > 0){

	let nTemp = nTemp * 2;
	let n = n + 1;

	}
	//n = 15

	let j = n/2 + 1;
	while( ~(j < 0) ){
		let two = 1;
		let loop = j;
		while (loop > 0) {
			let loop = loop - 1;
			let two = two * 2;
		}
		let temp = (y + two) * (y + two);
		if(~(temp > x) & temp > 0) {
			let y = y + two;
		}
		let j = j - 1;
	}
	return y;

    }

    /** Returns the greater number. */
    function int max(int a, int b) {
	if( a > b ){
		return a;
	} else {
		return b;
	}
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {

	if( a < b ){
		return a;
	} else {
		return b;
	}

    }
}
