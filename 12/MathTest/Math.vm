function Math.init 0
push constant 0
return
function Math.abs 0
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
neg
pop argument 0
label IF_FALSE0
push argument 0
return
function Math.multiply 5
push constant 0
pop local 0
push constant 0
pop local 2
push argument 0
call Math.abs 1
pop local 3
push argument 1
call Math.abs 1
pop local 4
label WHILE_EXP0
push local 2
push local 4
lt
not
if-goto WHILE_END0
push local 0
push local 3
add
pop local 0
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP0
label WHILE_END0
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
neg
pop local 0
label IF_FALSE0
push argument 1
push constant 0
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
neg
pop local 0
label IF_FALSE1
push local 0
return
function Math.divide 4
push constant 0
pop local 0
push argument 1
call Math.abs 1
pop local 3
push argument 0
call Math.abs 1
pop local 1
label WHILE_EXP0
push local 1
push local 3
lt
not
not
if-goto WHILE_END0
push local 1
push local 3
sub
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
neg
pop local 0
label IF_FALSE0
push argument 1
push constant 0
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
neg
pop local 0
label IF_FALSE1
push local 0
return
function Math.sqrt 7
push constant 0
pop local 0
push constant 1
pop local 6
push constant 0
pop local 2
label WHILE_EXP0
push local 6
push argument 0
lt
push local 6
and
push constant 0
gt
not
if-goto WHILE_END0
push local 6
push constant 2
call Math.multiply 2
pop local 6
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP0
label WHILE_END0
push local 2
push constant 2
call Math.divide 2
push constant 1
add
pop local 1
label WHILE_EXP1
push local 1
push constant 0
lt
not
not
if-goto WHILE_END1
push constant 1
pop local 5
push local 1
pop local 4
label WHILE_EXP2
push local 4
push constant 0
gt
not
if-goto WHILE_END2
push local 4
push constant 1
sub
pop local 4
push local 5
push constant 2
call Math.multiply 2
pop local 5
goto WHILE_EXP2
label WHILE_END2
push local 0
push local 5
add
push local 0
push local 5
add
call Math.multiply 2
pop local 3
push local 3
push argument 0
gt
not
push local 3
and
push constant 0
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push local 5
add
pop local 0
label IF_FALSE0
push local 1
push constant 1
sub
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 0
return
function Math.max 0
push argument 0
push argument 1
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
return
goto IF_END0
label IF_FALSE0
push argument 1
return
label IF_END0
function Math.min 0
push argument 0
push argument 1
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
return
goto IF_END0
label IF_FALSE0
push argument 1
return
label IF_END0
