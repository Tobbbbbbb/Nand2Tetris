class Block {
	
	field int x, y, startx, starty;
	//middle top left corner
	field Array bottom;
	field Array top;
	//array of heights
	field int rotate;
	field int numDraw; //keeps track of the number of times the block has been drawn, using this number to generate a random sequence of blocks
	field Array sequence;
	field int curBlock;
	field int reset;

	field int boardX;
	field int boardY;
	field int blockNum;

	field Board board;

	//linear congruential generator:

	field int current;
	field int m;
	field int a;
	field int c;
	field Array sequence;

	field int nextX;
	field int nextY;

	field Array nextTop;
	field Array nextBot;

	constructor Block new(){
		let curBlock = 0;
		let startx = 248;
		let starty = 32;
		let x = startx;
		let y = starty;
		let reset = 32767;
		let rotate = 0;

		let current = 0;
		let m = 7;
		let a = 3;
		let c = 2;

		let bottom = Array.new(4);
		let top = Array.new(4);

		let nextX = 464;
		let nextY = 16;

		let nextTop = Array.new(4);
		let nextBot = Array.new(4);

		let numDraw = 1;
		do newSequence();
		do newBlock();

		do draw();

		let board = Board.new();
		let boardX = board.getStartX();
		let boardY = board.getStartY();

		/**do board.drawPixel(9, 20);
		do board.drawPixel(7, 21);
		do board.drawPixel(8, 21);
		do board.drawPixel(9, 21);*/

		return this;
	}

	method void draw(){
		var int i,j, add;

		if(rotate = 0){
			let add = 1000;
		}
		if(rotate = 2){
			let add = 1;
		}
		if(rotate = 1){
			let add = 10;
		}
		if(rotate = 3){
			let add = 100;
		}
		let i = 0;
		let j = 0;
		while(i < 2){
			let j = 0;
			while(j < 4){
				if(i = 0){
					if(top[j] = 1){
						if(rotate = 0){
							do Screen.drawRectangle(x+(8*(j-1))+1, y+1, x+(8*(j-1))+6, y+6);
						}
						if(rotate = 1){
							do Screen.drawRectangle(x+9, y+(8*(j-1))+1, x+14, y+(8*(j-1))+6);
						}
						if(rotate = 2){
							do Screen.drawRectangle(x-(8*(j-2))+1, y+9, x-(8*(j-2))+6, y+14);
						}
						if(rotate = 3){
							do Screen.drawRectangle(x+1, y-(8*(j-2))+1, x+6, y-(8*(j-2))+6);
						}
					}
				} else {
					if(bottom[j] = 1){
						if(rotate = 0){
							do Screen.drawRectangle(x+(8*(j-1))+1, y+9, x+(8*(j-1))+6, y+14);
						}
						if(rotate = 1){
							do Screen.drawRectangle(x+1, y+(8*(j-1))+1, x+6, y+(8*(j-1))+6);
						}
						if(rotate = 2){
							do Screen.drawRectangle(x-(8*(j-2))+1, y+1, x-(8*(j-2))+6, y+6);
						}
						if(rotate = 3){
							do Screen.drawRectangle(x+9, y-(8*(j-2))+1, x+14, y-(8*(j-2))+6);
						}
					}
				}
				if(rotate = 0){
					let add = add/10;
				}
				if(rotate = 2){
					let add = add*10;
				}
				let j = j + 1;
			}
			if(rotate = 1){
				let add = 100;
			}
			if(rotate = 3){
				let add = 10;
			}
			if(rotate = 0){
				let add = 1000;
			}
			if(rotate = 2){
				let add = 1;
			}
			let i = i + 1;
		}
		if(numDraw = reset){
			let numDraw = 0;
		}
		let numDraw = numDraw + 1;
		return;
	}

	method void undraw() {
		do Screen.setColor(false);
		//do Screen.drawRectangle(x-8, y, x+23, y+15);
		do draw();
		do Screen.setColor(true);
		return;
	}

	method void move(int i, boolean draw) {
		if(draw){
			if(i = 130){ //left
				if(
				(~(blockNum = 2) & (rotate=0) & ((x-8) > boardX)) |
				(( rotate=1 ) & (x > boardX)) |
				(~(blockNum = 0) & ~(blockNum=5) & (rotate=2) & (x > boardX)) |
				(~(blockNum = 0) & (rotate=3) & (x > boardX)) |
				(((blockNum=2) | ((blockNum=5) & ~(rotate=2))) & (x > boardX)) |
				((blockNum=5) & (rotate=2) & ((x-8) > boardX)) |
				((rotate=2) & (blockNum=0) & ((x-8) > boardX)) |
				((rotate=3) & (blockNum=0) & ((x+8) > boardX))
				){
					if(~checkLeft()){
						do undraw();
						let x = x - 8;
						do draw();
					}
				}
			}
			if(i = 132) { //right
				if(
				(~((blockNum = 0) | (blockNum=5)) & (rotate=0) & ((x+16) < (boardX+80))) |
				(~(blockNum = 0) & (rotate=1) & ((x+16) < (boardX+80))) |
				(~(blockNum = 2) & (rotate=2) & ((x+24) < (boardX+80))) |
				((rotate=3) & ((x+16) < (boardX+80))) |
				(((blockNum = 0) | (blockNum=5)) & (rotate=0) & ((x+24) < (boardX+80))) |
				((blockNum = 0) & (rotate=1) & ((x+8) < (boardX+80))) |
				(((blockNum = 2) | ((blockNum=5) & (rotate=2))) & ((x+16) < (boardX+80)))
				){
					if(~checkRight()){
						do undraw();
						let x = x + 8;
						do draw();
					}
				}
			}
			if(i = 133) { //down
				do checkBot();
				do undraw();
				let y = y + 8;
				do draw();
			}
		} else {
			if(i=130){
				let x=x-8;
			}
			if(i=132){
				let x=x+8;
			}
			if(i=133){
				do checkBot();
				let y=y+8;
			}
		}
		return;
	}

	method void dispose(){
		do board.dispose();
		do Memory.deAlloc(this);
		return;
	}

	method void rotate(){
		var int condition;

		let condition = 0;

		if(rotate=1){
			if(((blockNum=0) | (blockNum=5)) & ((x-8) < boardX)){
				do undraw();
				do move(132, false);
				let condition = 1;
			}
			if(~(blockNum=0) & ~(blockNum=2) & ~(blockNum=5) & ((x+24) > (boardX+80))){
				do undraw();
				do move(130, false);
				let condition = 2;
			}
			if((blockNum=0) & ((x+16) > (boardX+80))){
				do undraw();
				do move(130, false);
				do move(130, false);
				let condition = 3;
			}

		}
		if(rotate = 3){
			if(((blockNum=0) | (blockNum=5)) & ((x+24) > (boardX+80))){
				do undraw();
				do move(130, false);
				let condition = 4;
			}
			if(~(blockNum=0) & ~(blockNum=2) & ~(blockNum=5) & ((x-8) < (boardX))){
				do undraw();
				do move(132, false);
				let condition = 5;
			}
			if((blockNum=0) & ((x-8) < boardX)){
				do undraw();
				do move(132, false);
				do move(132, false);
				let condition = 6;
			}
		}
		if(~checkRotate()){
			do undraw();
			if(~(rotate = 3)){
				let rotate = rotate + 1;
			} else {
				let rotate = 0;
			}
			do draw();
		} else {
			if(condition > 0){
				if((condition=1) | (condition = 5)){
					do move(130, false);
					do draw();
				}
				if((condition=2) | (condition=4)){
					do move(132, false);
					do draw();
				}
				if(condition=3){
					do move(132, false);
					do move(132, false);
					do draw();
				}
				if(condition=6){
					do move(130, false);
					do move(130, false);
					do draw();
				}
			}
		}
		return;
	}

	method int getY(){
		return y;
	}

	method int getX(){
		return x;
	}

	//Each letter stands for a different type of block, those letters being I, L, O, S, T, J, Z

	method void newSequence(){
		var int temp, num, count; //temp keeps track of the current number, num is the index of the array, and count is for the end

		let c = c+1;
		if(c = 7){
			let c = 1;
		}

		let num = 0;
		let sequence = Array.new(7);
		let temp = numDraw - ((numDraw/m)*m);
		let sequence[0] = current;
		let count = temp;
		let count = count * a;
		let count = count + c;
		let count = count - ((count/m)*m);
		if(count = temp){
			let temp = temp - 1;
		}
		while(num < 6){
			let sequence[num] = temp;
			let temp = temp*a;
			let temp = temp + c;
			let temp = temp - ((temp/m)*m);
			let num = num + 1;
		}
		let sequence[6] = (c*a) - (((c*a)/m)*m);
		return;
	}

	method void newBlock(){
		//do undraw();
		let x = startx;
		let y = starty;
		let rotate = 0;
		let blockNum = sequence[current];
		if(sequence[current] = 0){
			let top[0] = 0;
			let top[1] = 0;
			let top[2] = 0;
			let top[3] = 0;
			let bottom[0] = 1;
			let bottom[1] = 1;
			let bottom[2] = 1;
			let bottom[3] = 1;
		}
		if(sequence[current] = 1){
			let top[0] = 0;
			let top[1] = 0;
			let top[2] = 1;
			let top[3] = 0;
			let bottom[0] = 1;
			let bottom[1] = 1;
			let bottom[2] = 1;
			let bottom[3] = 0;
		}
		if(sequence[current] = 2){
			let top[0] = 0;
			let top[1] = 1;
			let top[2] = 1;
			let top[3] = 0;
			let bottom[0] = 0;
			let bottom[1] = 1;
			let bottom[2] = 1;
			let bottom[3] = 0;
		}
		if(sequence[current] = 3){
			let top[0] = 0;
			let top[1] = 1;
			let top[2] = 1;
			let top[3] = 0;
			let bottom[0] = 1;
			let bottom[1] = 1;
			let bottom[2] = 0;
			let bottom[3] = 0;
		}
		if(sequence[current] = 4){
			let top[0] = 0;
			let top[1] = 1;
			let top[2] = 0;
			let top[3] = 0;
			let bottom[0] = 1;
			let bottom[1] = 1;
			let bottom[2] = 1;
			let bottom[3] = 0;
		}
		if(sequence[current] = 5){
			let top[0] = 0;
			let top[1] = 1;
			let top[2] = 0;
			let top[3] = 0;
			let bottom[0] = 0;
			let bottom[1] = 1;
			let bottom[2] = 1;
			let bottom[3] = 1;
		}
		if(sequence[current] = 6){
			let top[0] = 1;
			let top[1] = 1;
			let top[2] = 0;
			let top[3] = 0;
			let bottom[0] = 0;
			let bottom[1] = 1;
			let bottom[2] = 1;
			let bottom[3] = 0;
		}
		let current = current + 1;
		if(current = 7){
			let current = 0;
			do newSequence();
		}
		do drawNext();
		do draw();
		return;
	}

	method void drawNext(){
		var int i, j;

		if(sequence[current] = 0){
			let nextTop[0] = 0;
			let nextTop[1] = 0;
			let nextTop[2] = 0;
			let nextTop[3] = 0;
			let nextBot[0] = 1;
			let nextBot[1] = 1;
			let nextBot[2] = 1;
			let nextBot[3] = 1;
		}
		if(sequence[current] = 1){
			let nextTop[0] = 0;
			let nextTop[1] = 0;
			let nextTop[2] = 1;
			let nextTop[3] = 0;
			let nextBot[0] = 1;
			let nextBot[1] = 1;
			let nextBot[2] = 1;
			let nextBot[3] = 0;
		}
		if(sequence[current] = 2){
			let nextTop[0] = 0;
			let nextTop[1] = 1;
			let nextTop[2] = 1;
			let nextTop[3] = 0;
			let nextBot[0] = 0;
			let nextBot[1] = 1;
			let nextBot[2] = 1;
			let nextBot[3] = 0;
		}
		if(sequence[current] = 3){
			let nextTop[0] = 0;
			let nextTop[1] = 1;
			let nextTop[2] = 1;
			let nextTop[3] = 0;
			let nextBot[0] = 1;
			let nextBot[1] = 1;
			let nextBot[2] = 0;
			let nextBot[3] = 0;
		}
		if(sequence[current] = 4){
			let nextTop[0] = 0;
			let nextTop[1] = 1;
			let nextTop[2] = 0;
			let nextTop[3] = 0;
			let nextBot[0] = 1;
			let nextBot[1] = 1;
			let nextBot[2] = 1;
			let nextBot[3] = 0;
		}
		if(sequence[current] = 5){
			let nextTop[0] = 0;
			let nextTop[1] = 1;
			let nextTop[2] = 0;
			let nextTop[3] = 0;
			let nextBot[0] = 0;
			let nextBot[1] = 1;
			let nextBot[2] = 1;
			let nextBot[3] = 1;
		}
		if(sequence[current] = 6){
			let nextTop[0] = 1;
			let nextTop[1] = 1;
			let nextTop[2] = 0;
			let nextTop[3] = 0;
			let nextBot[0] = 0;
			let nextBot[1] = 1;
			let nextBot[2] = 1;
			let nextBot[3] = 0;
		}

		let i = 0;

		do Screen.setColor(false);
		do Screen.drawRectangle(nextX, nextY, nextX+32, nextY+16);
		do Screen.setColor(true);

		while(i<2){
			let j = 0;
			while(j<4){
				if(i=0){
					if(nextTop[j] = 1){
						do Screen.drawRectangle(nextX+1+(8*j), nextY+1, nextX+6+(8*j), nextY+6);
					}
				}
				if(i=1){
					if(nextBot[j] = 1){
						do Screen.drawRectangle(nextX+1+(8*j), nextY+9, nextX+6+(8*j), nextY+14);
					}
				}
				let j=j+1;
			}
			let i = i+1;
		}
		return;
	}

	method int getRotation(){
		return rotate;
	}

	method void setBoardPos(int x, int y){
		let boardX = x;
		let boardY = y;
		return;
	}

	method void setBoard(Board b){
		let board = b;
		return;
	}

	method int convertX(int a){
		return (a-boardX)/8;
	}

	method int convertY(int b){
		return (b-boardY)/8;
	}

	method boolean checkBot(){
		var int xTemp, yTemp, pow, i;
		var boolean stop;

		let xTemp = convertX(x)-1;
		let yTemp = convertY(y)-1;

		//do Output.printInt(xTemp);
		//do Output.printChar(32);
		//do Output.printInt(yTemp);
		//top left corner

		if((yTemp=20) & (rotate = 0)){
			return true;
		}
		if(
		(rotate=2) & ( ((yTemp=20) & ~(blockNum=0)) | ((yTemp=21) &  (blockNum=0)))
		){
			return true;
		}
		if(
			(rotate=1) & ( ((yTemp=20) & ~((blockNum=0) | (blockNum=5))) | ((yTemp=19) & ((blockNum=0) | (blockNum=5))))
		){
			return true;
		}
		if(
			(rotate=3) & ( ((yTemp=19) & ~((blockNum=2) | (blockNum=5))) | ((yTemp=20) &  ((blockNum=2) | (blockNum=5))))
		){
			return true;
		}

		if(board.getPixel(xTemp, yTemp+2) & (
			((rotate = 2) & ((blockNum=0) | (blockNum=5))) |
			((rotate=0) & (blockNum=6))
		)) {
			return true;
		}

		if(board.getPixel(xTemp+1, yTemp+2) & (
			((rotate = 2) & ((blockNum=0) | (blockNum=4) | (blockNum=5) | (blockNum=6))) |
			((rotate = 1) & (blockNum=3)) |
			((rotate=3) & (blockNum=1))
		)){
			return true;
		}


		if(board.getPixel(xTemp+2, yTemp+2) & (
			((rotate=2) & ((blockNum=0) | (blockNum=1) | (blockNum=4))) |
			((rotate=0) & (blockNum=3)) |
			((rotate=1) & ((blockNum=6) | (blockNum=4) | (blockNum=5)))
		)){
			return true;
		}


		if(board.getPixel(xTemp+3, yTemp+2) & (
			((rotate = 2) & ((blockNum=0) | (blockNum=1) | (blockNum=3) | (blockNum=4)))
		)){
			return true;
		}

		if(board.getPixel(xTemp, yTemp+3) & (
			((rotate=0) & ((blockNum=0) | (blockNum=1) | (blockNum=3) | (blockNum=4)))
		)){
			return true;
		}

		if(board.getPixel(xTemp+1, yTemp+3) & (
			(rotate=0) | (blockNum=2) |
			((rotate=1) & ((blockNum=1) | (blockNum=4) | (blockNum=6))) |
			((rotate=2) & ((blockNum=1) | (blockNum=3))) |
			((rotate=3) & ((blockNum=3) | (blockNum=4) | (blockNum=5)))
		)){
			return true;
		}

		if(board.getPixel(xTemp+2, yTemp+3) & (
			(blockNum=2) |
			((rotate=0) & ((blockNum=0) | (blockNum=1) | (blockNum=4) | (blockNum=5) | (blockNum=6))) |
			((rotate=1) & ((blockNum=1) | (blockNum=3))) |
			((rotate=2) & ((blockNum=3) | (blockNum=4) | (blockNum=6))) | 
			((rotate=3) & ((blockNum=6) | (blockNum=5)))
		)){
			return true;
		}

		if(board.getPixel(xTemp+3, yTemp+3) & (
			((rotate=0) & ((blockNum=0) | (blockNum=5))) |
			((rotate=2) & (blockNum=6))
		)){
			return true;
		}

		if(board.getPixel(xTemp+1,yTemp+4) & (
			((rotate=1) & ((blockNum=0) | (blockNum=5))) |
			((rotate=3) & ((blockNum=6)))
		)){
			return true;
		}

		if(board.getPixel(xTemp+2, yTemp+4) & (
			((rotate=3) & ((blockNum=0) | (blockNum=1) | (blockNum=3) | (blockNum=4)))
		)){
			return true;
		}

		return false;
	}

	method int drawPixels(){
		var int a, b, i, j, ret;

		let a = convertX(x);
		let b = convertY(y)-1;

		let i = 0;
		let j = 0;
		while(i < 2){
			let j = 0;
			while(j < 4){
				if(i = 0){
					if(top[j] = 1){
						if(rotate = 0){
							//do Output.printInt(a+j-1);
							//do Output.printChar(32);
							//do Output.printInt(b+1);
							//do Output.printChar(32);

							do board.drawPixel(a+j-1,b+1);
						}
						if(rotate = 1){
							do board.drawPixel(a+1,b+j);
						}
						if(rotate = 2){
							do board.drawPixel(a-(j-2),b+2);
						}
						if(rotate = 3){
							do board.drawPixel(a,b-(j-3));
						}
					}
				} else {
					if(bottom[j] = 1){
						if(rotate = 0){
							//do Output.printInt(a+j-1);
							//do Output.printChar(32);
							//do Output.printInt(b+2);
							//do Output.printChar(32);

							do board.drawPixel(a+j-1,b+2);
						}
						if(rotate = 1){
							do board.drawPixel(a, b+j);
						}
						if(rotate = 2){
							do board.drawPixel(a-(j-2), b+1);
						}
						if(rotate = 3){
							do board.drawPixel(a+1,b-(j-3));
						}
					}
				}
			let j = j+1;
			}
		let i = i+1;
		}

		let i=0;
		let ret = 0;
		//check that b+3 is in range
		while(((b+i) < 23) & (i < 4)){
			let ret = ret + board.clearLine(b+i);
			let i = i+1;
		}

		return ret;
	}

	method boolean checkLeft(){
		var int xTemp, yTemp;

		let xTemp = convertX(x)-1;
		let yTemp = convertY(y)-1;

		if(board.getPixel(xTemp-1, yTemp+1) & (
			((rotate=0) & ((blockNum=5) | (blockNum=6))) |
			((rotate=2) & (blockNum=0))
		)){
			return true;
		}

		if(board.getPixel(xTemp-1, yTemp+2) & (
			((rotate=0) & ((blockNum=0) | (blockNum=1) | (blockNum=3) | (blockNum=4))) |
			((rotate=2) & (blockNum=5))
		)){
			return true;
		}

		if(board.getPixel(xTemp+2, yTemp+2) & (
			((rotate=2) & (blockNum=5))
		)){
			return true;
		}

		if(board.getPixel(xTemp, yTemp) & (
			((rotate=1) & ((blockNum=0) | (blockNum=1) | (blockNum=3) | (blockNum=4)))
		)){
			return true;
		}

		if(board.getPixel(xTemp+1, yTemp) & (
			((rotate=1) & (blockNum=6)) |
			((rotate=3) & ((blockNum=0) | (blockNum=5)))
		)){
			return true;
		}

		if(board.getPixel(xTemp, yTemp+1) & (
			(blockNum=2) | (rotate=1) |
			((rotate=0) & ((blockNum=3) | (blockNum=4) | (blockNum=5))) |
			((rotate=2) & ((blockNum=1) | (blockNum=4) | (blockNum=6)))
		)){
			return true;
		}

		if(board.getPixel(xTemp+1, yTemp+1) & (
			((rotate=0) & (blockNum=1)) |
			((rotate=2) & (blockNum=3)) |
			((rotate=3) & ((blockNum=0) | (blockNum=4) | (blockNum=5) | (blockNum=6)))
		)){
			return true;
		}

		if(board.getPixel(xTemp, yTemp+2) & (
			(blockNum=2) | (rotate=1) |
			((rotate=0) & ((blockNum=6) | (blockNum=5))) |
			((rotate=2) & ((blockNum=1) | (blockNum=3))) |
			((rotate=3) & (blockNum=3) | (blockNum=4) | (blockNum=5) | (blockNum=6))
		)){
			return true;
		}

		if(board.getPixel(xTemp+1, yTemp+2) & (
			((rotate=1) & (blockNum=3)) |
			((rotate=2) & ((blockNum=4) | (blockNum=5) | (blockNum=6))) |
			((rotate=3) & ((blockNum=0) | (blockNum=1)))
		)){
			return true;
		}

		if(board.getPixel(xTemp, yTemp+3) & (
			((rotate=1) & ((blockNum=1) | (blockNum=5) | (blockNum=0))) |
			((rotate=3) & (blockNum=6))
		)){
			return true;
		}

		if(board.getPixel(xTemp+1, yTemp+3) & (
			((rotate=3) & ((blockNum=0) | (blockNum=1) | (blockNum=3) | (blockNum=4)))
		)){
			return true;
		}

		return false;
	}

	method boolean checkRight(){
		var int xTemp, yTemp;

		let xTemp = convertX(x)-1;
		let yTemp = convertY(y)-1;

		if(board.getPixel(xTemp+4, yTemp+1) & (
			((rotate=3) & ((blockNum=0) | (blockNum=1) | (blockNum=3) | (blockNum=4)))
		)){
			return true;
		}

		if(board.getPixel(xTemp+4, yTemp+2) & (
			((rotate=0) & ((blockNum=0) | (blockNum=5))) |
			((rotate=2) & (blockNum=6))
		)){
			return true;
		}

		if(board.getPixel(xTemp+3, yTemp) & (
			((rotate=1) & (blockNum=6)) |
			((rotate=3) & (blockNum=5))
		)){
			return true;
		}

		if(board.getPixel(xTemp+2, yTemp) & (
			((rotate=1) & ((blockNum=0) | (blockNum=1) | (blockNum=3) | (blockNum=4)))
		)){
			return true;
		}

		if(board.getPixel(xTemp+3, yTemp+1) & (
			(blockNum=2) |
			((rotate=0) & ((blockNum=1) | (blockNum=3))) |
			((rotate=1) & ((blockNum=3) | (blockNum=4) | (blockNum=5))) |
			((rotate=2) & ((blockNum=6) | (blockNum=5))) |
			((rotate=3) & ((blockNum=0) | (blockNum=1) | (blockNum=4) | (blockNum=5) | (blockNum=6)))
		)){
			return true;
		}

		if(board.getPixel(xTemp+2, yTemp+1) & (
			((rotate=0) & ((blockNum=4) | (blockNum=6) | (blockNum=5))) |
			((rotate=1) & (blockNum=1)) |
			((rotate=3) & (blockNum=3))
		)){
			return true;
		}

		if(board.getPixel(xTemp+3, yTemp+2) & (
			(blockNum=2) | (rotate=3) |
			((rotate=0) & ((blockNum=1) | (blockNum=4) | (blockNum=6))) |
			((rotate=1) & ((blockNum=1) | (blockNum=3))) |
			((rotate=2) & ((blockNum=3) | (blockNum=4) | (blockNum=5)))
		)){
			return true;
		}

		if(board.getPixel(xTemp+2, yTemp+2) & (
			((rotate=0) & (blockNum=3)) |
			((rotate=1) & ((blockNum=4) | (blockNum=5) | (blockNum=6))) |
			((rotate=2) & (blockNum=1))
		)){
			return true;
		}

		if(board.getPixel(xTemp+3, yTemp+3) & (
			((rotate=3) & ((blockNum=0) | (blockNum=1) |  (blockNum=3) | (blockNum=4)))
		)){
			return true;
		}

		if(board.getPixel(xTemp+2, yTemp+3) & (
			((rotate=1) & ((blockNum=0) | (blockNum=5))) |
			((rotate=3) & (blockNum=6))
		)){
			return true;
		}

		return false;
	}

	method boolean checkRotate(){
		var int xTemp, yTemp;

		let xTemp = convertX(x)-1;
		let yTemp = convertY(y)-1;

		if(board.getPixel(xTemp+1, yTemp) & (
			((rotate=0) & ((blockNum=0) | (blockNum=1) | (blockNum=3) | (blockNum=4)))
		)){
			return true;
		}

		if(board.getPixel(xTemp, yTemp+2) & (
			((rotate=3) & ((blockNum=0) | (blockNum=1) | (blockNum=3) | (blockNum=4)))
		)){
			return true;
		}

		if(board.getPixel(xTemp+3, yTemp+2) & (
			((rotate=2) & ((blockNum=0) | (blockNum=1) | (blockNum=3) | (blockNum=4)))
		)){
			return true;
		}

		if(board.getPixel(xTemp+3, yTemp+1) & (
			((rotate=1) & ((blockNum=0) | (blockNum=1) | (blockNum=3) | (blockNum=4)))
		)){
			return true;
		}

		if(board.getPixel(xTemp+2, yTemp) & (
			((rotate=0) & (blockNum=6)) |
			((rotate=2) & ((blockNum=0) | (blockNum=5)))
		)){
			return true;
		}

		if(board.getPixel(xTemp, yTemp+1) & (
			((rotate=3) & (blockNum=6)) |
			((rotate=1) & ((blockNum=0) | (blockNum=5)))
		)){
			return true;
		}

		if(board.getPixel(xTemp+1, yTemp+3) & (
			((rotate=2) & (blockNum=6)) |
			((rotate=0) & ((blockNum=0) | (blockNum=5)))
		)){
			return true;
		}

		if(board.getPixel(xTemp+3, yTemp+2) & (
			((rotate=1) & (blockNum=6)) |
			((rotate=3) & ((blockNum=0) | (blockNum=5)))
		)){
			return true;
		}

		if(board.getPixel(xTemp+1, yTemp+1) & (
			((rotate=0) & ((blockNum=0) | (blockNum=1))) |
			((rotate=2) & (blockNum=3)) |
			((rotate=3) & ((blockNum=4) | (blockNum=5) | (blockNum=6)))
		)){
			return true;
		}

		if(board.getPixel(xTemp+2, yTemp+1) & (
			((rotate=1) & ((blockNum=0) | (blockNum=1))) |
			((rotate=3) & (blockNum=3)) |
			((rotate=0) & ((blockNum=4) | (blockNum=5) | (blockNum=6)))
		)){
			return true;
		}

		if(board.getPixel(xTemp+1, yTemp+2) & (
			((rotate=3) & ((blockNum=0) | (blockNum=1))) |
			((rotate=1) & (blockNum=3)) |
			((rotate=2) & ((blockNum=4) | (blockNum=5) | (blockNum=6)))
		)){
			return true;
		}

		if(board.getPixel(xTemp+2, yTemp+2) & (
			((rotate=2) & ((blockNum=0) | (blockNum=1))) |
			((rotate=0) & (blockNum=3)) |
			((rotate=1) & ((blockNum=4) | (blockNum=5) | (blockNum=6)))
		)){
			return true;
		}

		return false;
	}

	method boolean lose(){
		return board.lose();
	}

}